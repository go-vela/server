{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for the Vela server",
    "title": "Vela server",
    "version": "0.6.1"
  },
  "host": "localhost",
  "basePath": "/api/v1",
  "paths": {
    "/api/v1/admin/build": {
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a build in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminUpdateBuild",
        "parameters": [
          {
            "description": "Payload containing build to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the build in the database",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          "404": {
            "description": "Unable to update the build in the database",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to update the build in the database",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/admin/builds": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get all of the builds in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminAllBuilds",
        "responses": {
          "200": {
            "description": "Successfully retrieved all builds from the database",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          "500": {
            "description": "Unable to retrieve all builds from the database",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/admin/deployment": {
      "put": {
        "description": "Get All",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminUpdateDeployment",
        "responses": {
          "501": {
            "description": "This endpoint is not implemented",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "501"
      }
    },
    "/api/v1/admin/deployments": {
      "get": {
        "description": "Get all of the deployments in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminAllDeployments",
        "responses": {
          "501": {
            "description": "This endpoint is not implemented",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "501"
      }
    },
    "/api/v1/admin/hook": {
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a hook in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminUpdateHook",
        "parameters": [
          {
            "description": "Payload containing hook to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the hook in the database",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "404": {
            "description": "Unable to update the hook in the database",
            "schema": {
              "type": "string"
            }
          },
          "501": {
            "description": "Unable to update the hook in the database",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/admin/hooks": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get all of the webhooks stored in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminAllHooks",
        "responses": {
          "200": {
            "description": "Successfully retrieved all hooks from the database",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "500": {
            "description": "Unable to retrieve all hooks",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/admin/repo": {
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a repo in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminUpdateRepo",
        "parameters": [
          {
            "description": "Payload containing repo to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Repo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the repo in the database",
            "schema": {
              "$ref": "#/definitions/Repo"
            }
          },
          "404": {
            "description": "Unable to update the repo in the database",
            "schema": {
              "type": "string"
            }
          },
          "501": {
            "description": "Unable to update the repo in the database",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/admin/repos": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get all of the repos in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminAllRepos",
        "responses": {
          "200": {
            "description": "Successfully retrieved all repos from the database",
            "schema": {
              "$ref": "#/definitions/Repo"
            }
          },
          "500": {
            "description": "Unable to retrieve all repos from the database",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/admin/secret": {
      "put": {
        "description": "Update a secret in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminUpdateSecret",
        "parameters": [
          {
            "description": "Payload containing secret to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          {
            "type": "string",
            "description": "Vela bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the secret in the database",
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          "404": {
            "description": "Unable to update the secret in the database",
            "schema": {
              "type": "string"
            }
          },
          "501": {
            "description": "Unable to update the secret in the database",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/admin/secrets": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get all of the secrets in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminAllSecrets",
        "responses": {
          "200": {
            "description": "Successfully retrieved all secrets from the database",
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          "500": {
            "description": "Unable to retrieve all secrets from the database",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/admin/service": {
      "put": {
        "description": "Update a hook in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminUpdateService",
        "parameters": [
          {
            "description": "Payload containing service to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          {
            "type": "string",
            "description": "Vela bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the service in the database",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "404": {
            "description": "Unable to update the service in the database",
            "schema": {
              "type": "string"
            }
          },
          "501": {
            "description": "Unable to update the service in the database",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/admin/services": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get all of the services in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminAllServices",
        "responses": {
          "200": {
            "description": "Successfully retrieved all services from the database",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "500": {
            "description": "Unable to retrieve all services from the database",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/admin/step": {
      "put": {
        "description": "Update a step in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminUpdateStep",
        "parameters": [
          {
            "description": "Payload containing step to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Step"
            }
          },
          {
            "type": "string",
            "description": "Vela bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the step in the database",
            "schema": {
              "$ref": "#/definitions/Step"
            }
          },
          "404": {
            "description": "Unable to update the step in the database",
            "schema": {
              "type": "string"
            }
          },
          "501": {
            "description": "Unable to update the step in the database",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/admin/steps": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get all of the steps in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminAllSteps",
        "responses": {
          "200": {
            "description": "Successfully retrieved all steps from the database",
            "schema": {
              "$ref": "#/definitions/Step"
            }
          },
          "500": {
            "description": "Unable to retrieve all steps from the database",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/admin/user": {
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a user in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminUpdateUser",
        "parameters": [
          {
            "description": "Payload containing user to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the user in the database",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Unable to update the user in the database",
            "schema": {
              "type": "string"
            }
          },
          "501": {
            "description": "Unable to update the user in the database",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/admin/users": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get all of the users in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminAllUsers",
        "responses": {
          "200": {
            "description": "Successfully retrieved all users from the database",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "500": {
            "description": "Unable to retrieve all users from the database",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/deployments/{org}/{repo}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a list of deployments for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deployment"
        ],
        "operationId": "GetDeployments",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of deployments",
            "schema": {
              "$ref": "#/definitions/Deployment"
            }
          },
          "400": {
            "description": "Unable to retrieve the list of deployments",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to retrieve the list of deployments",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a deployment for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deployment"
        ],
        "operationId": "CreateDeployment",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the deployment",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          "400": {
            "description": "Unable to create the deployment",
            "schema": {
              "$ref": "#/definitions/Deployment"
            }
          },
          "500": {
            "description": "Unable to create the deployment",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "201"
      }
    },
    "/api/v1/deployments/{org}/{repo}/{deployment}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a deployment from the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deployment"
        ],
        "operationId": "GetDeployment",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "deployment",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Unable to retrieve the deployment",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "501"
      }
    },
    "/api/v1/hooks/{org}/{repo}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a webhook for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deployment"
        ],
        "operationId": "GetHooks",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully retrieved webhooks",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "Unable to retrieve webhooks",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to retrieve webhooks",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a webhook for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "webhook"
        ],
        "operationId": "CreateHook",
        "parameters": [
          {
            "description": "Webhook payload that we expect from the user or VCS",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "The webhook has been created",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "The webhook was unable to be created",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "The webhook was unable to be created",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "201"
      }
    },
    "/api/v1/hooks/{org}/{repo}/{hook}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a webhook for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deployment"
        ],
        "operationId": "GetHook",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "hook",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the webhook",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "Unable to retrieve the webhook",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to retrieve the webhook",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a webhook for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "webhook"
        ],
        "operationId": "UpdateHook",
        "parameters": [
          {
            "description": "Webhook payload that we expect from the user or VCS",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "hook",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the webhook",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "The webhook was unable to be updated",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The webhook was unable to be updated",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "The webhook was unable to be updated",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete a webhook for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deployment"
        ],
        "operationId": "DeleteHooks",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "hook",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the webhook",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "The webhook was unable to be updated",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The webhook was unable to be updated",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "The webhook was unable to be updated",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/repos": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get all repos in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "repos"
        ],
        "operationId": "GetRepos",
        "responses": {
          "200": {
            "description": "Successfully retrieved the repo",
            "schema": {
              "$ref": "#/definitions/Repo"
            }
          },
          "400": {
            "description": "Unable to retrieve the repo",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to retrieve the repo",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a repo in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "repos"
        ],
        "operationId": "CreateRepo",
        "parameters": [
          {
            "description": "Payload containing the repo to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Repo"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the repo",
            "schema": {
              "$ref": "#/definitions/Repo"
            }
          },
          "400": {
            "description": "Unable to create the repo",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Unable to create the repo",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "Unable to create the repo",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to create the repo",
            "schema": {
              "type": "string"
            }
          },
          "503": {
            "description": "Unable to create the repo",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "201"
      }
    },
    "/api/v1/repos/{org}/{repo}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a repo in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "repos"
        ],
        "operationId": "GetRepo",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the repo",
            "schema": {
              "$ref": "#/definitions/Repo"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a repo in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "repos"
        ],
        "operationId": "UpdateRepo",
        "parameters": [
          {
            "description": "Payload containing the repo to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Repo"
            }
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the repo",
            "schema": {
              "$ref": "#/definitions/Repo"
            }
          },
          "400": {
            "description": "Unable to update the repo",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to update the repo",
            "schema": {
              "type": "string"
            }
          },
          "503": {
            "description": "Unable to update the repo",
            "schema": {
              "type": "string"
            }
          },
          "510": {
            "description": "Unable to update the repo",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete a repo in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "repos"
        ],
        "operationId": "DeleteRepo",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the repo",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to  deleted the repo",
            "schema": {
              "type": "string"
            }
          },
          "510": {
            "description": "Unable to  deleted the repo",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/repos/{org}/{repo}/builds": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "GetBuilds",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the build",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          "400": {
            "description": "Unable to retrieve the list of builds",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to retrieve the list of builds",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "CreateBuild",
        "parameters": [
          {
            "description": "Payload containing the build to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the build",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          "400": {
            "description": "Unable to create the build",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Unable to create the build",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to create the build",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "201"
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "GetBuild",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number to restart",
            "name": "build",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully restarted the build",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Updates a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "UpdateBuild",
        "parameters": [
          {
            "description": "Payload containing the build to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number to restart",
            "name": "build",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully restarted the build",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          "404": {
            "description": "Unable to restart the build",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to restart the build",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Restart a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "RestartBuild",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number to restart",
            "name": "build",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully restarted the build",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          "400": {
            "description": "Unable to restart the build",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Unable to restart the build",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to restart the build",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "201"
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "DeleteBuild",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number to restart",
            "name": "build",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully restarted the build",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Unable to restart the build",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}/logs": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get logs for a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "GetBuildLogs",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number to restart",
            "name": "build",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved logs for the build",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          "500": {
            "description": "Unable to retrieve logs for the build",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}/services": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a list of all services for a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "services"
        ],
        "operationId": "GetServices",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of services",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "Unable to retrieve the list of services",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to restart the list of services",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a service for a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "services"
        ],
        "operationId": "CreateService",
        "parameters": [
          {
            "description": "Payload containing the service to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the service",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "Unable to create the service",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to create the service",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "201"
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}/services/{service}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a service for a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "services"
        ],
        "operationId": "GetService",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Name of the service",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the service",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "Unable to retrieve the service",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to retrieve the service",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a service for a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "services"
        ],
        "operationId": "UpdateService",
        "parameters": [
          {
            "description": "Payload containing the service to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Name of the service",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the service",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "Unable to update the service",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to update the service",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete a service for a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "services"
        ],
        "operationId": "DeleteService",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Name of the service",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the service",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to delete the service",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}/services/{service}/logs": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Retrieve the logs for a service",
        "produces": [
          "application/json"
        ],
        "tags": [
          "services"
        ],
        "operationId": "GetServiceLogs",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Name of the service",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the service logs",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          "500": {
            "description": "Unable to retrieve the service logs",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update the logs for a service",
        "produces": [
          "application/json"
        ],
        "tags": [
          "services"
        ],
        "operationId": "UpdateServiceLog",
        "parameters": [
          {
            "description": "Payload containing the log to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Name of the service",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the service logs",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          "400": {
            "description": "Unable to updated the service logs",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to updates the service logs",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "201"
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create the logs for a service",
        "produces": [
          "application/json"
        ],
        "tags": [
          "services"
        ],
        "operationId": "CreateServiceLogs",
        "parameters": [
          {
            "description": "Payload containing the log to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Name of the service",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the service logs",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          "400": {
            "description": "Unable to create the service logs",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to create the service logs",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "201"
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete the logs for a service",
        "produces": [
          "application/json"
        ],
        "tags": [
          "services"
        ],
        "operationId": "DeleteServiceLogs",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Name of the service",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully deleted the service logs",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to delete the service logs",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "201"
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}/steps": {
      "get": {
        "description": "Retrieve a list of steps for a build",
        "produces": [
          "application/json"
        ],
        "tags": [
          "steps"
        ],
        "operationId": "GetSteps",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Vela bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of steps",
            "schema": {
              "$ref": "#/definitions/Step"
            }
          },
          "400": {
            "description": "Unable to retrieve the list of steps",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to retrieve the list of steps",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "post": {
        "description": "Create a step for a build",
        "produces": [
          "application/json"
        ],
        "tags": [
          "steps"
        ],
        "operationId": "CreateStep",
        "parameters": [
          {
            "description": "Payload containing the step to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Step"
            }
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Vela bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the step",
            "schema": {
              "$ref": "#/definitions/Step"
            }
          },
          "400": {
            "description": "Unable to create the step",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to create the step",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "201"
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}/steps/{step}": {
      "get": {
        "description": "Retrieve a step for a build",
        "produces": [
          "application/json"
        ],
        "tags": [
          "steps"
        ],
        "operationId": "GetStep",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Build number",
            "name": "step",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Vela bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the step",
            "schema": {
              "$ref": "#/definitions/Step"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "put": {
        "description": "Update a step for a build",
        "produces": [
          "application/json"
        ],
        "tags": [
          "steps"
        ],
        "operationId": "UpdateStep",
        "parameters": [
          {
            "description": "Payload containing the step to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Step"
            }
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Build number",
            "name": "step",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Vela bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the step",
            "schema": {
              "$ref": "#/definitions/Step"
            }
          },
          "400": {
            "description": "Unable to update the step",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to update the step",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "delete": {
        "description": "Delete a step for a build",
        "produces": [
          "application/json"
        ],
        "tags": [
          "steps"
        ],
        "operationId": "DeleteStep",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Build number",
            "name": "step",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Vela bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the step",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Successfully deleted the step",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}/steps/{step}/logs": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Retrieve the logs for a step",
        "produces": [
          "application/json"
        ],
        "tags": [
          "steps"
        ],
        "operationId": "GetStepLog",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Build number",
            "name": "step",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the logs for step",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update the logs for a step",
        "produces": [
          "application/json"
        ],
        "tags": [
          "steps"
        ],
        "operationId": "UpdateStepLog",
        "parameters": [
          {
            "description": "Payload containing the log to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Build number",
            "name": "step",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the logs for step",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          "400": {
            "description": "Unable to updated the logs for a step",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to updated the logs for a step",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create the logs for a step",
        "produces": [
          "application/json"
        ],
        "tags": [
          "steps"
        ],
        "operationId": "CreateStepLog",
        "parameters": [
          {
            "description": "Payload containing the log to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Build number",
            "name": "step",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the logs for step",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          "400": {
            "description": "Unable to create the logs for a step",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to create the logs for a step",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "201"
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete the logs for a step",
        "produces": [
          "application/json"
        ],
        "tags": [
          "steps"
        ],
        "operationId": "DeleteStepLog",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Build number",
            "name": "step",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the logs for the step",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to delete the logs for the step",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/repos/{org}/{repo}/chown": {
      "patch": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Change the owner of the webhook for a repo",
        "produces": [
          "application/json"
        ],
        "tags": [
          "repos"
        ],
        "operationId": "ChownRepo",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully changed the owner for the repo",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to change the owner for the repo",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/repos/{org}/{repo}/repair": {
      "patch": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Remove and recreate the webhook for a repo",
        "produces": [
          "application/json"
        ],
        "tags": [
          "repos"
        ],
        "operationId": "RepairRepo",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully repaired the repo",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to repair the repo",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/secrets/{engine}/{type}/{org}/{name}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "summary": "Retrieve a list of secrets from the configured backend.",
        "operationId": "GetSecrets",
        "parameters": [
          {
            "type": "string",
            "description": "Secret engine to create a secret in",
            "name": "engine",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Secret type to create. Options 'org', 'repo', or 'shared'",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo if a repo secret, team name if a shared secret, or '*' if an org secret",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of secrets",
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          "400": {
            "description": "Unable to retrieve the list of secrets",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to retrieve the list of secrets",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a secret",
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "operationId": "CreateSecret",
        "parameters": [
          {
            "description": "Payload containing the secret to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          {
            "type": "string",
            "description": "Secret engine to create a secret in",
            "name": "engine",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Secret type to create. Options 'org', 'repo', or 'shared'",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo if a repo secret, team name if a shared secret, or '*' if an org secret",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created the secret",
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          "400": {
            "description": "Unable to create the secret",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to create the secret",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "201"
      }
    },
    "/api/v1/secrets/{engine}/{type}/{org}/{name}/{secret}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "summary": "Retrieve a secret from the configured backend.",
        "operationId": "GetSecret",
        "parameters": [
          {
            "type": "string",
            "description": "Secret engine to create a secret in",
            "name": "engine",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Secret type to create. Options 'org', 'repo', or 'shared'",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo if a repo secret, team name if a shared secret, or '*' if an org secret",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the secret",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the secret",
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          "500": {
            "description": "Unable to retrieve the secret",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "summary": "Update a secret from the configured backend.",
        "operationId": "UpdateSecrets",
        "parameters": [
          {
            "description": "Payload containing the secret to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          {
            "type": "string",
            "description": "Secret engine to create a secret in",
            "name": "engine",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Secret type to create. Options 'org', 'repo', or 'shared'",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo if a repo secret, team name if a shared secret, or '*' if an org secret",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the secret",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the secret",
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          "400": {
            "description": "Unable to update the secret",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to update the secret",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "summary": "Delete a secret from the configured backend.",
        "operationId": "DeleteSecret",
        "parameters": [
          {
            "type": "string",
            "description": "Secret engine to create a secret in",
            "name": "engine",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Secret type to create. Options 'org', 'repo', or 'shared'",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo if a repo secret, team name if a shared secret, or '*' if an org secret",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the secret",
            "name": "secret",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload containing secret to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the secret",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to update the secret",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/user": {
      "get": {
        "description": "Retrieve the current authenticated user from the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "GetCurrentUser",
        "parameters": [
          {
            "type": "string",
            "description": "Vela bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the current user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "put": {
        "description": "Update the current authenticated user in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "UpdateCurrentUser",
        "parameters": [
          {
            "description": "Payload containing the user to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "type": "string",
            "description": "Vela bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the current user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Unable to update the current user",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Unable to update the current user",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to update the current user",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/user/source/repos": {
      "get": {
        "description": "Retrieve a list of repos for the current authenticated user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "GetUserSourceRepos",
        "parameters": [
          {
            "type": "string",
            "description": "Vela bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of repos for the current user",
            "schema": {
              "$ref": "#/definitions/Repo"
            }
          },
          "404": {
            "description": "Unable to retrieve a list of repos for the current user",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/user/token": {
      "post": {
        "description": "Create a token for the current authenticated user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "CreateToken",
        "parameters": [
          {
            "type": "string",
            "description": "Vela bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created a token for the current user",
            "schema": {
              "$ref": "#/definitions/Login"
            }
          },
          "500": {
            "description": "Unable to create a token for the current user",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "201"
      },
      "delete": {
        "description": "Delete a token for the current authenticated user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "DeleteToken",
        "parameters": [
          {
            "type": "string",
            "description": "Vela bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully delete a token for the current user",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to delete a token for the current user",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/api/v1/users": {
      "get": {
        "description": "Retrieve a list of users for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "GetUsers",
        "parameters": [
          {
            "type": "string",
            "description": "Vela bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of users",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Unable to retrieve the list of users",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to retrieve the list of users",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "post": {
        "description": "Create a user for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "CreateUser",
        "parameters": [
          {
            "description": "Payload containing the user to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "type": "string",
            "description": "Vela bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Unable to create the user",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to create the user",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "201"
      }
    },
    "/api/v1/users/{user}": {
      "get": {
        "description": "Retrieve a user for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "GetUser",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the user",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Vela bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Unable to retrieve the user",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "put": {
        "description": "Update a user for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "UpdateUser",
        "parameters": [
          {
            "description": "Payload containing the user to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "type": "string",
            "description": "Name of the user",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Vela bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Unable to update the user",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Unable to update the user",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to update the user",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      },
      "delete": {
        "description": "Delete a user for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "DeleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the user",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Vela bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted of user",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Unable to delete user",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to delete user",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/authenticate": {
      "get": {
        "description": "Authenticate with the Vela API",
        "produces": [
          "application/json"
        ],
        "tags": [
          "authenticate"
        ],
        "operationId": "Authenticate",
        "parameters": [
          {
            "description": "Payload containing login information",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully authenticated",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unable to authenticate",
            "schema": {
              "type": "string"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/badge/{org}/{repo}/status.svg": {
      "get": {
        "description": "Get a badge for the repo",
        "produces": [
          "application/json"
        ],
        "tags": [
          "router"
        ],
        "operationId": "GetBadge",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo to get the badge for",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org the repo belongs to",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a status Badge",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/health": {
      "get": {
        "description": "Check if the Vela API is available",
        "produces": [
          "application/json"
        ],
        "tags": [
          "router"
        ],
        "operationId": "Health",
        "responses": {
          "200": {
            "description": "Successfully 'ping'-ed Vela API",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/login": {
      "get": {
        "description": "Log into the Vela api",
        "produces": [
          "application/json"
        ],
        "tags": [
          "router"
        ],
        "operationId": "GETGetLogin",
        "responses": {
          "307": {
            "description": "Redirected to /authenticate",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "307"
      },
      "post": {
        "description": "Login to the Vela api",
        "produces": [
          "application/json"
        ],
        "tags": [
          "router"
        ],
        "operationId": "POSTLogin",
        "parameters": [
          {
            "description": "Login payload that we expect from the user",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful login to the Vela API",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Unable to login to the Vela API",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unable to login to the Vela API",
            "schema": {
              "type": "string"
            }
          },
          "503": {
            "description": "Unable to login to the Vela API",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/logout": {
      "get": {
        "description": "Log into the Vela api",
        "produces": [
          "application/json"
        ],
        "tags": [
          "router"
        ],
        "operationId": "GETLogout",
        "responses": {
          "307": {
            "description": "Redirected to /authenticate",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "307"
      }
    },
    "/metrics": {
      "get": {
        "description": "Retrieve metrics from the  Vela api",
        "produces": [
          "application/json"
        ],
        "tags": [
          "router"
        ],
        "operationId": "BaseMetrics",
        "responses": {
          "200": {
            "description": "Successfully retrieved the Vela metrics",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/version": {
      "get": {
        "description": "Get the version of the Vela API",
        "produces": [
          "application/json"
        ],
        "tags": [
          "router"
        ],
        "operationId": "Version",
        "responses": {
          "200": {
            "description": "Successfully retrieved the Vela API version",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    },
    "/webhook": {
      "post": {
        "description": "Deliver a webhook to the vela api",
        "produces": [
          "application/json"
        ],
        "tags": [
          "router"
        ],
        "operationId": "PostWebhook",
        "parameters": [
          {
            "description": "Webhook payload that we expect from the user or VCS",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully received the webhook",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Malformed webhook payload",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "type": "string"
            }
          },
          "503": {
            "description": "Unable to receive the webhook",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-success_http_code": "200"
      }
    }
  },
  "definitions": {
    "Build": {
      "type": "object",
      "title": "Build is the library representation of a build for a pipeline.",
      "properties": {
        "author": {
          "type": "string",
          "x-go-name": "Author"
        },
        "base_ref": {
          "type": "string",
          "x-go-name": "BaseRef"
        },
        "branch": {
          "type": "string",
          "x-go-name": "Branch"
        },
        "clone": {
          "type": "string",
          "x-go-name": "Clone"
        },
        "commit": {
          "type": "string",
          "x-go-name": "Commit"
        },
        "created": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Created"
        },
        "deploy": {
          "type": "string",
          "x-go-name": "Deploy"
        },
        "distribution": {
          "type": "string",
          "x-go-name": "Distribution"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "enqueued": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Enqueued"
        },
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "event": {
          "type": "string",
          "x-go-name": "Event"
        },
        "finished": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Finished"
        },
        "head_ref": {
          "type": "string",
          "x-go-name": "HeadRef"
        },
        "host": {
          "type": "string",
          "x-go-name": "Host"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "link": {
          "type": "string",
          "x-go-name": "Link"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "number": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Number"
        },
        "parent": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Parent"
        },
        "ref": {
          "type": "string",
          "x-go-name": "Ref"
        },
        "repo_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RepoID"
        },
        "runtime": {
          "type": "string",
          "x-go-name": "Runtime"
        },
        "sender": {
          "type": "string",
          "x-go-name": "Sender"
        },
        "source": {
          "type": "string",
          "x-go-name": "Source"
        },
        "started": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Started"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Container": {
      "type": "object",
      "properties": {
        "commands": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Commands"
        },
        "detach": {
          "type": "boolean",
          "x-go-name": "Detach"
        },
        "directory": {
          "type": "string",
          "x-go-name": "Directory"
        },
        "entrypoint": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Entrypoint"
        },
        "environment": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Environment"
        },
        "exit_code": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExitCode"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "image": {
          "type": "string",
          "x-go-name": "Image"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "needs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Needs"
        },
        "networks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Networks"
        },
        "number": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Number"
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Ports"
        },
        "privileged": {
          "type": "boolean",
          "x-go-name": "Privileged"
        },
        "pull": {
          "type": "string",
          "x-go-name": "Pull"
        },
        "ruleset": {
          "$ref": "#/definitions/Ruleset"
        },
        "secrets": {
          "$ref": "#/definitions/StepSecretSlice"
        },
        "ulimits": {
          "$ref": "#/definitions/UlimitSlice"
        },
        "volumes": {
          "$ref": "#/definitions/VolumeSlice"
        }
      },
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "ContainerSlice": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Container"
      },
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "Deployment": {
      "type": "object",
      "title": "Deployment is the library representation of a deployment.",
      "properties": {
        "commit": {
          "type": "string",
          "x-go-name": "Commit"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "ref": {
          "type": "string",
          "x-go-name": "Ref"
        },
        "repo_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RepoID"
        },
        "target": {
          "type": "string",
          "x-go-name": "Target"
        },
        "task": {
          "type": "string",
          "x-go-name": "Task"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "user": {
          "type": "string",
          "x-go-name": "User"
        }
      },
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Executor": {
      "type": "object",
      "title": "Executor is the library representation of an executor for a worker.",
      "properties": {
        "build": {
          "$ref": "#/definitions/Build"
        },
        "distribution": {
          "type": "string",
          "x-go-name": "Distribution"
        },
        "host": {
          "type": "string",
          "x-go-name": "Host"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "pipeline": {
          "$ref": "#/definitions/PipelineBuild"
        },
        "repo": {
          "$ref": "#/definitions/Repo"
        },
        "runtime": {
          "type": "string",
          "x-go-name": "Runtime"
        }
      },
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Log": {
      "type": "object",
      "title": "Log is the library representation of a log for a step in a build.",
      "properties": {
        "build_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BuildID"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "Data"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "repo_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RepoID"
        },
        "service_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ServiceID"
        },
        "step_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StepID"
        }
      },
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Login": {
      "type": "object",
      "title": "Login is the library representation of a user login.",
      "properties": {
        "otp": {
          "type": "string",
          "x-go-name": "OTP"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/go-vela/types/library"
    },
    "PipelineBuild": {
      "type": "object",
      "title": "Build is the pipeline representation of a build for a pipeline.",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "metadata": {
          "$ref": "#/definitions/PipelineMetadata"
        },
        "secrets": {
          "$ref": "#/definitions/SecretSlice"
        },
        "services": {
          "$ref": "#/definitions/ContainerSlice"
        },
        "stages": {
          "$ref": "#/definitions/StageSlice"
        },
        "steps": {
          "$ref": "#/definitions/ContainerSlice"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        },
        "worker": {
          "$ref": "#/definitions/PipelineWorker"
        }
      },
      "x-go-name": "Build",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelineMetadata": {
      "type": "object",
      "title": "Metadata is the yaml representation of the metadata block for a pipeline.",
      "properties": {
        "template": {
          "type": "boolean",
          "x-go-name": "Template"
        }
      },
      "x-go-name": "Metadata",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelineWorker": {
      "type": "object",
      "title": "Worker is the yaml representation of the worker block for a pipeline.",
      "properties": {
        "flavor": {
          "type": "string",
          "x-go-name": "Flavor"
        },
        "platform": {
          "type": "string",
          "x-go-name": "Platform"
        }
      },
      "x-go-name": "Worker",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "Repo": {
      "type": "object",
      "title": "Repo is the library representation of a repo.",
      "properties": {
        "active": {
          "type": "boolean",
          "x-go-name": "Active"
        },
        "allow_comment": {
          "type": "boolean",
          "x-go-name": "AllowComment"
        },
        "allow_deploy": {
          "type": "boolean",
          "x-go-name": "AllowDeploy"
        },
        "allow_pull": {
          "type": "boolean",
          "x-go-name": "AllowPull"
        },
        "allow_push": {
          "type": "boolean",
          "x-go-name": "AllowPush"
        },
        "allow_tag": {
          "type": "boolean",
          "x-go-name": "AllowTag"
        },
        "branch": {
          "type": "string",
          "x-go-name": "Branch"
        },
        "clone": {
          "type": "string",
          "x-go-name": "Clone"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "link": {
          "type": "string",
          "x-go-name": "Link"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "org": {
          "type": "string",
          "x-go-name": "Org"
        },
        "private": {
          "type": "boolean",
          "x-go-name": "Private"
        },
        "timeout": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Timeout"
        },
        "trusted": {
          "type": "boolean",
          "x-go-name": "Trusted"
        },
        "user_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserID"
        },
        "visibility": {
          "type": "string",
          "x-go-name": "Visibility"
        }
      },
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Rules": {
      "type": "object",
      "properties": {
        "branch": {
          "$ref": "#/definitions/Ruletype"
        },
        "comment": {
          "$ref": "#/definitions/Ruletype"
        },
        "event": {
          "$ref": "#/definitions/Ruletype"
        },
        "path": {
          "$ref": "#/definitions/Ruletype"
        },
        "repo": {
          "$ref": "#/definitions/Ruletype"
        },
        "status": {
          "$ref": "#/definitions/Ruletype"
        },
        "tag": {
          "$ref": "#/definitions/Ruletype"
        },
        "target": {
          "$ref": "#/definitions/Ruletype"
        }
      },
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "Ruleset": {
      "type": "object",
      "properties": {
        "continue": {
          "type": "boolean",
          "x-go-name": "Continue"
        },
        "if": {
          "$ref": "#/definitions/Rules"
        },
        "matcher": {
          "type": "string",
          "x-go-name": "Matcher"
        },
        "operator": {
          "type": "string",
          "x-go-name": "Operator"
        },
        "unless": {
          "$ref": "#/definitions/Rules"
        }
      },
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "Ruletype": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "Secret": {
      "type": "object",
      "title": "Secret is the library representation of a secret.",
      "properties": {
        "engine": {
          "type": "string",
          "x-go-name": "Engine"
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "origin": {
          "$ref": "#/definitions/Container"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "SecretSlice": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Secret"
      },
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "Service": {
      "type": "object",
      "title": "Service is the library representation of a service in a build.",
      "properties": {
        "build_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BuildID"
        },
        "created": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Created"
        },
        "distribution": {
          "type": "string",
          "x-go-name": "Distribution"
        },
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "exit_code": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExitCode"
        },
        "finished": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Finished"
        },
        "host": {
          "type": "string",
          "x-go-name": "Host"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "image": {
          "type": "string",
          "x-go-name": "Image"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "number": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Number"
        },
        "repo_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RepoID"
        },
        "runtime": {
          "type": "string",
          "x-go-name": "Runtime"
        },
        "started": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Started"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Stage": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "needs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Needs"
        },
        "steps": {
          "$ref": "#/definitions/ContainerSlice"
        }
      },
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "StageSlice": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Stage"
      },
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "Step": {
      "type": "object",
      "title": "Step is the library representation of a step in a build.",
      "properties": {
        "build_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BuildID"
        },
        "created": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Created"
        },
        "distribution": {
          "type": "string",
          "x-go-name": "Distribution"
        },
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "exit_code": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExitCode"
        },
        "finished": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Finished"
        },
        "host": {
          "type": "string",
          "x-go-name": "Host"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "image": {
          "type": "string",
          "x-go-name": "Image"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "number": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Number"
        },
        "repo_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RepoID"
        },
        "runtime": {
          "type": "string",
          "x-go-name": "Runtime"
        },
        "stage": {
          "type": "string",
          "x-go-name": "Stage"
        },
        "started": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Started"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/go-vela/types/library"
    },
    "StepSecret": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string",
          "x-go-name": "Source"
        },
        "target": {
          "type": "string",
          "x-go-name": "Target"
        }
      },
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "StepSecretSlice": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/StepSecret"
      },
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "Ulimit": {
      "type": "object",
      "properties": {
        "hard": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Hard"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "soft": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Soft"
        }
      },
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "UlimitSlice": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Ulimit"
      },
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "User": {
      "type": "object",
      "title": "User is the library representation of a user.",
      "properties": {
        "active": {
          "type": "boolean",
          "x-go-name": "Active"
        },
        "admin": {
          "type": "boolean",
          "x-go-name": "Admin"
        },
        "favorites": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Favorites"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Volume": {
      "type": "object",
      "properties": {
        "access_mode": {
          "type": "string",
          "x-go-name": "AccessMode"
        },
        "destination": {
          "type": "string",
          "x-go-name": "Destination"
        },
        "source": {
          "type": "string",
          "x-go-name": "Source"
        }
      },
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "VolumeSlice": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Volume"
      },
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "Webhook": {
      "type": "object",
      "title": "Hook is the library representation of a webhook for a repo.",
      "properties": {
        "branch": {
          "type": "string",
          "x-go-name": "Branch"
        },
        "build_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BuildID"
        },
        "created": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Created"
        },
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "event": {
          "type": "string",
          "x-go-name": "Event"
        },
        "host": {
          "type": "string",
          "x-go-name": "Host"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "link": {
          "type": "string",
          "x-go-name": "Link"
        },
        "number": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Number"
        },
        "repo_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RepoID"
        },
        "source_id": {
          "type": "string",
          "x-go-name": "SourceID"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-name": "Hook",
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Worker": {
      "type": "object",
      "title": "Worker is the library representation of a worker.",
      "properties": {
        "active": {
          "type": "boolean",
          "x-go-name": "Active"
        },
        "address": {
          "type": "string",
          "x-go-name": "Address"
        },
        "hostname": {
          "type": "string",
          "x-go-name": "Hostname"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "last_checked_in": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LastCheckedIn"
        },
        "routes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Routes"
        }
      },
      "x-go-package": "github.com/go-vela/types/library"
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}